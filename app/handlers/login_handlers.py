from dotenv import load_dotenv, set_key, find_dotenv
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import Message
import logging

from app.sql_database.User import UserDatabase

load_dotenv(override=True)

LOG_DIR = "./data/bot_logs"

db_user = UserDatabase()

router = Router()
storage = MemoryStorage()
dispatcher = Dispatcher(storage=storage)

class AuthStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_auth_ok = State()

@router.message(Command(commands=["auth"]))
async def auth(message: Message, state: FSMContext):
    """"
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –§–ò–û, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    """
    user_id = message.from_user.id
    print(user_id)
    if db_user.exists(user_id):
        # if db_user.is_approved(user_id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–¥–æ–±—Ä–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    # else:
    #     await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –≤–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return
    else:
        await message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –§–ò–û:")
        await state.set_state(AuthStates.waiting_for_username)

@router.message(AuthStates.waiting_for_username)
async def handle_user(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # if user_id in db_user.get_admins_id():
        # user_data = db_user.get_user(user_id)
        # if user_data.get("access_rights") == "duty_admin":
        #     await message.answer(
        #         "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã!\n"
        #         "–í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –ø—Ä–∞–≤–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        #     )
        # else:
        #     await message.answer(
        #         "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã!"
        #     )
        
    
    username = message.text.strip()
    tg_link = message.from_user.username
    db_user.insert(user_id=user_id, 
                    username=username,
                    telegram_username=tg_link)
    await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã."
            # "–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –¥–µ–∂—É—Ä–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏—Ç –≤–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
            )

    # ========== –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–µ–∂ –∞–¥–º–∏–Ω—É =============
    # duty_admin_id = db_user.get_duty_admin_id()
    # admin_list = [duty_admin_id] if duty_admin_id else db_user.get_admins_id()
    # admin_text = (
    # f"üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø\n\n"
    # f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
    # f"üì± Telegram: @{tg_link}\n"
    # f"üÜî ID: {user_id}\n\n"
    # " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø. –î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
    # "üëâ `/approve <ID>`"
    # )

    # for admin_id in admin_list:
    #     try:
    #         await message.bot.send_message(admin_id, admin_text)
    #     except Exception as e:
    #         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    # await state.clear()

@router.message(Command(commands=["approve"]))
async def cmd_approve(message: Message):
    user_id = message.from_user.id

    if not db_user.exists(user_id):
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    # user_data = db_user.get_user(user_id)
    # if user_data.get("access_rights") not in ("duty_admin", "admin") and user_id not in ADMINS:
    #     await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    #     return

    parts = message.text.split()
    # if len(parts) < 2:
    #     await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /approve <ID>")
    #     return

    target_user_id = parts[1]
    if not target_user_id.isdigit():
        await message.answer("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    target_user_id = int(target_user_id)
    if not db_user.exists(target_user_id):
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id={target_user_id} –Ω–µ—Ç –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    db_user.approve_user(target_user_id)
    target_user_data = db_user.get_user(target_user_id)
    tg_link = db_user.get_user_telegram_link(target_user_id)

    # await message.answer(
    # f"""
    # ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!\n\n
    
    # üë§ –§–ò–û: {target_user_data["username"]}\n
    # üì± Telegram: {tg_link}\n
    # üÜî ID: {target_user_id}
    # """
    # )
    # ========== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω –æ–¥–æ–±—Ä–µ–Ω ===========
    # try:
    #     await message.bot.send_message(
    #         target_user_id,
    #         "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω –¥–µ–∂—É—Ä–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!"
    #     )
    # except Exception as e:
    #     logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

@router.message(Command(commands=["delete_user"]))
async def cmd_delete_user(message: Message):
    user_id = message.from_user.id

    user_data = db_user.get_user(user_id)
    # if not db_user.exists(user_id) or user_data.get("access_rights") != "duty_admin":
        # await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    return   
    
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_user <ID1> <ID2> ...")
        return
    
    target_user_ids = []
    for user_id_str in parts[1:]:
        if user_id_str.isdigit():
            target_user_ids.append(int(user_id_str))
        else:
            await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: {user_id_str}")

    invalid_ids = []
    deleted_ids = []

    for target_user_id in target_user_ids:
        if not db_user.exists(target_user_id):
            invalid_ids.append(target_user_id)
        else:
            try:
                db_user.delete(target_user_id)
                deleted_ids.append(target_user_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
                invalid_ids.append(target_user_id)

    response = ""
    if deleted_ids:
        response += f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å ID {", ".join(map(str, deleted_ids))} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n'
    if invalid_ids:
        response += f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ID {", ".join(map(str, invalid_ids))}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'

    await message.answer(response)
    
@router.message(Command(commands=["show_db"]))
async def cmd_show_db(message: Message):
    # user_id = message.from_user.id
    # if user_id not in db_user.get_admins_id():
    #     await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    # return
    
    try:
        rows = db_user.get_all_users()

        if not rows:
            await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
            return

        text = "üìä *–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:*\n\n"
        for row in rows:
            text += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                f'üÜî ID: {row["user_id"]}\n'
                f'üë®‚Äçüíª –ò–º—è (–§–ò–û): {row["username"]}\n'
                f'üì± Telegram-–Ω–∏–∫: @{row["telegram_username"] or "–Ω–µ —É–∫–∞–∑–∞–Ω"}\n'
                # f'üìã –°—Ç–∞—Ç—É—Å: {"‚úÖ –û–¥–æ–±—Ä–µ–Ω" if row["approved"] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è"}\n'
                # f'üîë –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {row["access_rights"]}\n'
                # f'{"=" * 20}\n'
            )
        max_length = 4096
        for i in range(0, len(text), max_length):
            chunk = text[i:i + max_length]
            await message.answer(chunk)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.")
