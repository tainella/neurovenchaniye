from dotenv import load_dotenv
from aiogram import Dispatcher, Router, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.sql_database.User import UserDatabase

load_dotenv(override=True)

class AuthStates(StatesGroup):
    waiting_for_tgname = State()

LOG_DIR = "./data/bot_logs"

db_user = UserDatabase()

router = Router()
storage = MemoryStorage()
dispatcher = Dispatcher(storage=storage)

admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë§ –°—Ç–∞—Ç—å –¥–µ–∂—É—Ä–Ω—ã–º –∞–¥–º–∏–Ω–æ–º"),
         KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

@router.message(Command(commands=["admin"]))
async def admin_command(message: Message):
    user_id = message.from_user.id
    if user_id in db_user.get_admins_id():
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", 
                             reply_markup=admin_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@router.message(F.text == "üë§ –°—Ç–∞—Ç—å –¥–µ–∂—É—Ä–Ω—ã–º –∞–¥–º–∏–Ω–æ–º")
async def update_vector_database(message: Message):
    user_id = message.from_user.id
    if not db_user.exists(user_id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    if user_id not in db_user.get_admins_id():
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ADMIN-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return
    
    db_user.set_access_rights(user_id, "duty_admin")
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –¥–µ–∂—É—Ä–Ω—ã–π –∞–¥–º–∏–Ω. –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤–∞–º.")

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ @telegram_name –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞")
    await state.set_state(AuthStates.waiting_for_tgname)

@router.message(AuthStates.waiting_for_tgname)
async def handle_new_admin(message: Message, state: FSMContext):
    tg_name = message.text.strip()
    user_id = db_user.get_user_id_by_tgname(tg_name.replace('@', ''))
    if user_id:
        db_user.set_access_rights(user_id, 'admin')
        await message.answer("–ù–æ–≤—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
    else:
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.message(Command(commands=["show_duty_admin"]))
async def cmd_show_duty_admin(message: Message):
    duty_id = db_user.get_duty_admin_id()
    if duty_id == 0:
        await message.answer("–î–µ–∂—É—Ä–Ω—ã–π –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        return
    
    d_data = db_user.get_user(duty_id)
    tg_link = db_user.get_user_telegram_link(duty_id)
    text = (
        f"üë®‚Äçüíº –¢–µ–∫—É—â–∏–π –¥–µ–∂—É—Ä–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n\n"
        f'üë§ –ò–º—è: {d_data["username"]}\n'
        f'üì± Telegram: {tg_link}\n'
    )
    await message.answer(text)